#!/usr/bin/env python
from subprocess import Popen, PIPE
import sys, os

if len(sys.argv) != 3:
    print >> sys.stderr, "Usage: cinf.py DIRECTORY OUT_PREFIX"
    exit(1)

c_file = open( "%s.c" % sys.argv[2], "w" )

H_FNAME = "%s.h" % sys.argv[2]
h_file = open( H_FNAME, "w" )


os.chdir( sys.argv[1] )

def hash_to_bytes(s):
    "Convert a hex hash string into a series of bytes"
    r = []

    for h in range(0,len(s),2):
        r.append( int(s[h:h+2], 16) )
    return r

def hash_format(s):
    "Take a hash as a string, reduce and split into bytes"
    return hash_to_bytes(s[0:10])

versions = {}

p = Popen( "git rev-list -n 1 HEAD",
           shell = True, stdout = PIPE )
so,se = p.communicate()
assert p.wait() == 0

versions["."] = hash_format(so.strip())

# Now the submodules:
p = Popen( "git submodule status --recursive",
           shell = True, stdout = PIPE )
so,se = p.communicate()
assert p.wait() == 0

for l in so.splitlines():
    hsh, name = l.split()[0:2]
    if hsh[0] in "+- ":
        hsh = hsh[1:]

    versions[name] = hash_format(hsh)

def field(vals):
    if isinstance(vals, str):
        vals = [ord(x) for x in vals]

    assert len(vals) <= 0xff
    r = [ len(vals) ]
    r += vals
    return r

data = []
for name, val in versions.iteritems():
    data += field(name)
    data += field(val)

print >>c_file, """/* Board configuration information. */
/* This file is automatically generated. */
#include <stdint.h>"""

print >>c_file, """
/* %i bytes of config info */
const uint8_t version_buf[] =
{""" % len(data)

ROW_LEN = 8
for i in range(0, len(data), ROW_LEN):
    print >>c_file, "\t%s" % " ".join( ["0x%2.2x,"%data[x] for x in range(i,min(i+ROW_LEN, len(data)))] )

print >>c_file, """};
"""

defname = H_FNAME.upper().replace("-","_").replace(".", "_")

print >>h_file, """#ifndef __%s
#define __%s
#include <stdint.h>

#define VERSIONBUF_LEN %i
extern const uint8_t version_buf[VERSIONBUF_LEN];

#endif /* __%s */
""" % (defname, defname, len(data), defname)

